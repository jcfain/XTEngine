const scriptStatusElement=document.getElementById("scriptStatus"),scriptStatusContainerElement=document.getElementById("scriptStatusContainer"),scriptStatusButton=document.getElementById("scriptStatusButton");let lerpInterval,currentChannels={},isShown=!1;function toggleScriptStatusModal(){scriptStatusElement.classList.toggle("hidden"),scriptStatusButton.classList.toggle("icon-button-down"),isShown=!scriptStatusElement.classList.contains("hidden")}function setupchannel(channel){if(currentChannels[channel])return void currentChannels[channel].element.classList.remove("hidden");let userChannel=remoteUserSettings.availableChannelsArray.find((x=>x.channel==channel)),div=document.createElement("div");div.id=channel,div.classList.add("script-status-div");let element=document.createElement("progress");const channelColor=getChannelColor(channel);element.style.setProperty("color",channelColor),element.style.setProperty("--scrollbar-background",channelColor),element.classList.add("script-status-progress");let elementLabel=document.createElement("label");elementLabel.classList.add("script-status-label"),elementLabel.innerText=userChannel.friendlyName;let valueId=channel+"valueElement";elementLabel.setAttribute("for",valueId),element.id=valueId,element.min=0,element.max=100,element.classList.add("pregress-status"),channelsObj={},channelsObj.timeout=void 0,channelsObj.element=div,channelsObj.progress=element,channelsObj.channel=userChannel,currentChannels[channel]=channelsObj,div.appendChild(elementLabel),div.appendChild(element),scriptStatusContainerElement.appendChild(div)}function setChannelStatus(channel,value,time,timeType){if(!isShown)return;setupchannel(channel);let channelsObj=currentChannels[channel];channelsObj.timeout&&clearTimeout(channelsObj.timeout),startLerp(channelsObj,value,time),channelsObj.timeout=setTimeout((function(){channelsObj.element.classList.add("hidden"),channelsObj.lerpInterval&&clearInterval(channelsObj.lerpInterval)}),1e4)}function startLerp(channelsObj,targetValue,targetTime){channelsObj.lerpInterval&&clearInterval(channelsObj.lerpInterval);const startValue=channelsObj.progress.value;if(startValue==targetValue)return;channelsObj.currentTime=startValue>targetValue?targetTime:0,channelsObj.currentValue=startValue;const posScale=Math.abs(startValue-targetValue)*(10/targetTime);channelsObj.lerpInterval=setInterval((function(channelsObj,targetValue,targetTime,startValue,interval,posScale){if(channelsObj.currentTime=startValue>targetValue?channelsObj.currentTime-=interval:channelsObj.currentTime+=interval,startValue>targetValue?channelsObj.currentValue-=posScale:channelsObj.currentValue+=posScale,startValue>targetValue?channelsObj.currentTime<=0:channelsObj.currentTime>=targetTime)return debug("Clear interval target: "+targetValue),void clearInterval(channelsObj.lerpInterval);channelsObj.progress.value=channelsObj.currentValue}),10,channelsObj,targetValue,targetTime,startValue,10,posScale)}function draw(context,pointA,pointB,level=1){ctx.fillStyle="#5095cd",ctx.strokeStyle="#0095cd",ctx.beginPath(),ctx.moveTo(pointA.x,pointA.y),ctx.lineTo(pointB.x,pointB.y),ctx.stroke(),requestAnimationFrame(update)}function update(){context.clearRect(0,0,width,height),drawBall(x,y,30),x=lerp(x,endX,.1),y=lerp(y,endY,.1),requestAnimationFrame(update)}function lerp(startValue,targetValue,timeScale){return startValue*timeScale+targetValue*(1-timeScale)}